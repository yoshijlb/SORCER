/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

version = sorcerVersion

jar {
    manifest {
        attributes("Implementation-Title": "Service Provider", "Implementation-Version": version)
    }
    baseName = "ssu"
    classifier = "prv"
    dependsOn classes
    from sourceSets.main.output
    exclude('sorcer/requestor/**')
}

task servicePrvDlJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "Service Provider Exported Classes", "Implementation-Version": version)
    }
    baseName = "ssu"
    classifier = "dl"
    dependsOn classes
    from sourceSets.main.output
    include('sorcer/provider/ssu/*')
    from sourceSets.main.resources
    include('sorcer.jpg')
}

task serviceReqJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "Service Requestor", "Implementation-Version": version)
    }
    baseName = "ssu"
    classifier = "req"
    dependsOn classes
    from sourceSets.main.output
    include('sorcer/requestor/**')
}

task servicePrvUiJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "Ssu Service UI",
                "Implementation-Version": version)
    }
    baseName = "ssu"
    classifier = "ui"
    dependsOn classes
    from sourceSets.main.output
    include('sorcer/provider/ssu/ui/**')
}

artifacts {
    archives servicePrvDlJar
    archives servicePrvUiJar
    archives serviceReqJar
}

install.dependsOn(['servicePrvDlJar', 'serviceReqJar', 'servicePrvUiJar'])
build.dependsOn(install)

dependencies {
    compile project(':sorcer-platform')
    compile project(':sorcer-lib')
    compile project(':sos-db-prv')
    testCompile project(':sorcer-test')
    testRuntime libs.slf4j
}

def deployConfig = file("configs/ssu-prv.config")
artifacts {
    archives deployConfig
}

def repoPath() {
    return "org/sorcer/ssu/${version}"
}

bootme {
    description = 'Starts up a service provider'
    if (!file("logs").exists()) file("logs").mkdir()
    starterConfig = file("${projectDir.path}/configs/StartSsuConfig.groovy")
    systemProperties = ["relative.repo.path" : repoPath(), "java.util.logging.config.file" : "${projectDir.path}/configs/sorcer-prv.logging"]
    spawn = true
}

//task runRequestor(type:JavaExec, dependsOn:[jar, "bootme"]) {
task runRequestor(type:JavaExec, dependsOn:[install]) {
    description = 'Runs a service requestor executing a local or remote service.'
    main = "sorcer.core.requestor.ServiceRequestor"
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "java.util.logging.config.file", "${projectDir.path}/configs/sorcer-req.logging"
    systemProperty "requestor.properties", "configs/ssu-req.properties"
    systemProperty "java.rmi.server.codebase",
            "${websterUrl}/${repoPath()}/ssu-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"
//    args = ["sorcer.requestor.ssu.SsuRequestor", "netlet"]
    args = ["sorcer.requestor.ssu.SsuRequestor", "dynamic"]
//	finalizedBy (":stopme")
}

test {
    description = 'Tests local and remote services with JUnit test case.'
    systemProperty "java.rmi.server.codebase",
            "${websterUrl}/${repoPath()}/ssu-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"

    testLogging {
        events "passed", "skipped", "failed"/*, "standardOut", "standardError"*/
    }
    dependsOn([install, bootme])
    finalizedBy(stopme)
}








